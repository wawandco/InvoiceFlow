{"ast":null,"code":"import { flattenAndStringify, stringifyRequestData } from './utils.js';\n// Method for formatting HTTP body for the multipart/form-data specification\n// Mostly taken from Fermata.js\n// https://github.com/natevw/fermata/blob/5d9732a33d776ce925013a265935facd1626cc88/fermata.js#L315-L343\nconst multipartDataGenerator = (method, data, headers) => {\n  const segno = (Math.round(Math.random() * 1e16) + Math.round(Math.random() * 1e16)).toString();\n  headers['Content-Type'] = `multipart/form-data; boundary=${segno}`;\n  const textEncoder = new TextEncoder();\n  let buffer = new Uint8Array(0);\n  const endBuffer = textEncoder.encode('\\r\\n');\n  function push(l) {\n    const prevBuffer = buffer;\n    const newBuffer = l instanceof Uint8Array ? l : new Uint8Array(textEncoder.encode(l));\n    buffer = new Uint8Array(prevBuffer.length + newBuffer.length + 2);\n    buffer.set(prevBuffer);\n    buffer.set(newBuffer, prevBuffer.length);\n    buffer.set(endBuffer, buffer.length - 2);\n  }\n  function q(s) {\n    return `\"${s.replace(/\"|\"/g, '%22').replace(/\\r\\n|\\r|\\n/g, ' ')}\"`;\n  }\n  const flattenedData = flattenAndStringify(data);\n  for (const k in flattenedData) {\n    const v = flattenedData[k];\n    push(`--${segno}`);\n    if (Object.prototype.hasOwnProperty.call(v, 'data')) {\n      const typedEntry = v;\n      push(`Content-Disposition: form-data; name=${q(k)}; filename=${q(typedEntry.name || 'blob')}`);\n      push(`Content-Type: ${typedEntry.type || 'application/octet-stream'}`);\n      push('');\n      push(typedEntry.data);\n    } else {\n      push(`Content-Disposition: form-data; name=${q(k)}`);\n      push('');\n      push(v);\n    }\n  }\n  push(`--${segno}--`);\n  return buffer;\n};\nexport function multipartRequestDataProcessor(method, data, headers, callback) {\n  data = data || {};\n  if (method !== 'POST') {\n    return callback(null, stringifyRequestData(data));\n  }\n  this._stripe._platformFunctions.tryBufferData(data).then(bufferedData => {\n    const buffer = multipartDataGenerator(method, bufferedData, headers);\n    return callback(null, buffer);\n  }).catch(err => callback(err, null));\n}","map":{"version":3,"names":["flattenAndStringify","stringifyRequestData","multipartDataGenerator","method","data","headers","segno","Math","round","random","toString","textEncoder","TextEncoder","buffer","Uint8Array","endBuffer","encode","push","l","prevBuffer","newBuffer","length","set","q","s","replace","flattenedData","k","v","Object","prototype","hasOwnProperty","call","typedEntry","name","type","multipartRequestDataProcessor","callback","_stripe","_platformFunctions","tryBufferData","then","bufferedData","catch","err"],"sources":["/Users/manuelperez/Projects/React/InvoiceFlow/node_modules/stripe/esm/multipart.js"],"sourcesContent":["import { flattenAndStringify, stringifyRequestData } from './utils.js';\n// Method for formatting HTTP body for the multipart/form-data specification\n// Mostly taken from Fermata.js\n// https://github.com/natevw/fermata/blob/5d9732a33d776ce925013a265935facd1626cc88/fermata.js#L315-L343\nconst multipartDataGenerator = (method, data, headers) => {\n    const segno = (Math.round(Math.random() * 1e16) + Math.round(Math.random() * 1e16)).toString();\n    headers['Content-Type'] = `multipart/form-data; boundary=${segno}`;\n    const textEncoder = new TextEncoder();\n    let buffer = new Uint8Array(0);\n    const endBuffer = textEncoder.encode('\\r\\n');\n    function push(l) {\n        const prevBuffer = buffer;\n        const newBuffer = l instanceof Uint8Array ? l : new Uint8Array(textEncoder.encode(l));\n        buffer = new Uint8Array(prevBuffer.length + newBuffer.length + 2);\n        buffer.set(prevBuffer);\n        buffer.set(newBuffer, prevBuffer.length);\n        buffer.set(endBuffer, buffer.length - 2);\n    }\n    function q(s) {\n        return `\"${s.replace(/\"|\"/g, '%22').replace(/\\r\\n|\\r|\\n/g, ' ')}\"`;\n    }\n    const flattenedData = flattenAndStringify(data);\n    for (const k in flattenedData) {\n        const v = flattenedData[k];\n        push(`--${segno}`);\n        if (Object.prototype.hasOwnProperty.call(v, 'data')) {\n            const typedEntry = v;\n            push(`Content-Disposition: form-data; name=${q(k)}; filename=${q(typedEntry.name || 'blob')}`);\n            push(`Content-Type: ${typedEntry.type || 'application/octet-stream'}`);\n            push('');\n            push(typedEntry.data);\n        }\n        else {\n            push(`Content-Disposition: form-data; name=${q(k)}`);\n            push('');\n            push(v);\n        }\n    }\n    push(`--${segno}--`);\n    return buffer;\n};\nexport function multipartRequestDataProcessor(method, data, headers, callback) {\n    data = data || {};\n    if (method !== 'POST') {\n        return callback(null, stringifyRequestData(data));\n    }\n    this._stripe._platformFunctions\n        .tryBufferData(data)\n        .then((bufferedData) => {\n        const buffer = multipartDataGenerator(method, bufferedData, headers);\n        return callback(null, buffer);\n    })\n        .catch((err) => callback(err, null));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}