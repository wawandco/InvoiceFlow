{"ast":null,"code":"import { StripeAPIError, StripeAuthenticationError, StripeConnectionError, StripeError, StripePermissionError, StripeRateLimitError } from './Error.js';\nimport { emitWarning, normalizeHeaders, removeNullish, stringifyRequestData } from './utils.js';\nimport { HttpClient } from './net/HttpClient.js';\nconst MAX_RETRY_AFTER_WAIT = 60;\nexport class RequestSender {\n  constructor(stripe, maxBufferedRequestMetric) {\n    this._stripe = stripe;\n    this._maxBufferedRequestMetric = maxBufferedRequestMetric;\n  }\n  _addHeadersDirectlyToObject(obj, headers) {\n    // For convenience, make some headers easily accessible on\n    // lastResponse.\n    // NOTE: Stripe responds with lowercase header names/keys.\n    obj.requestId = headers['request-id'];\n    obj.stripeAccount = obj.stripeAccount || headers['stripe-account'];\n    obj.apiVersion = obj.apiVersion || headers['stripe-version'];\n    obj.idempotencyKey = obj.idempotencyKey || headers['idempotency-key'];\n  }\n  _makeResponseEvent(requestEvent, statusCode, headers) {\n    const requestEndTime = Date.now();\n    const requestDurationMs = requestEndTime - requestEvent.request_start_time;\n    return removeNullish({\n      api_version: headers['stripe-version'],\n      account: headers['stripe-account'],\n      idempotency_key: headers['idempotency-key'],\n      method: requestEvent.method,\n      path: requestEvent.path,\n      status: statusCode,\n      request_id: this._getRequestId(headers),\n      elapsed: requestDurationMs,\n      request_start_time: requestEvent.request_start_time,\n      request_end_time: requestEndTime\n    });\n  }\n  _getRequestId(headers) {\n    return headers['request-id'];\n  }\n  /**\n   * Used by methods with spec.streaming === true. For these methods, we do not\n   * buffer successful responses into memory or do parse them into stripe\n   * objects, we delegate that all of that to the user and pass back the raw\n   * http.Response object to the callback.\n   *\n   * (Unsuccessful responses shouldn't make it here, they should\n   * still be buffered/parsed and handled by _jsonResponseHandler -- see\n   * makeRequest)\n   */\n  _streamingResponseHandler(requestEvent, usage, callback) {\n    return res => {\n      const headers = res.getHeaders();\n      const streamCompleteCallback = () => {\n        const responseEvent = this._makeResponseEvent(requestEvent, res.getStatusCode(), headers);\n        this._stripe._emitter.emit('response', responseEvent);\n        this._recordRequestMetrics(this._getRequestId(headers), responseEvent.elapsed, usage);\n      };\n      const stream = res.toStream(streamCompleteCallback);\n      // This is here for backwards compatibility, as the stream is a raw\n      // HTTP response in Node and the legacy behavior was to mutate this\n      // response.\n      this._addHeadersDirectlyToObject(stream, headers);\n      return callback(null, stream);\n    };\n  }\n  /**\n   * Default handler for Stripe responses. Buffers the response into memory,\n   * parses the JSON and returns it (i.e. passes it to the callback) if there\n   * is no \"error\" field. Otherwise constructs/passes an appropriate Error.\n   */\n  _jsonResponseHandler(requestEvent, usage, callback) {\n    return res => {\n      const headers = res.getHeaders();\n      const requestId = this._getRequestId(headers);\n      const statusCode = res.getStatusCode();\n      const responseEvent = this._makeResponseEvent(requestEvent, statusCode, headers);\n      this._stripe._emitter.emit('response', responseEvent);\n      res.toJSON().then(jsonResponse => {\n        if (jsonResponse.error) {\n          let err;\n          // Convert OAuth error responses into a standard format\n          // so that the rest of the error logic can be shared\n          if (typeof jsonResponse.error === 'string') {\n            jsonResponse.error = {\n              type: jsonResponse.error,\n              message: jsonResponse.error_description\n            };\n          }\n          jsonResponse.error.headers = headers;\n          jsonResponse.error.statusCode = statusCode;\n          jsonResponse.error.requestId = requestId;\n          if (statusCode === 401) {\n            err = new StripeAuthenticationError(jsonResponse.error);\n          } else if (statusCode === 403) {\n            err = new StripePermissionError(jsonResponse.error);\n          } else if (statusCode === 429) {\n            err = new StripeRateLimitError(jsonResponse.error);\n          } else {\n            err = StripeError.generate(jsonResponse.error);\n          }\n          throw err;\n        }\n        return jsonResponse;\n      }, e => {\n        throw new StripeAPIError({\n          message: 'Invalid JSON received from the Stripe API',\n          exception: e,\n          requestId: headers['request-id']\n        });\n      }).then(jsonResponse => {\n        this._recordRequestMetrics(requestId, responseEvent.elapsed, usage);\n        // Expose raw response object.\n        const rawResponse = res.getRawResponse();\n        this._addHeadersDirectlyToObject(rawResponse, headers);\n        Object.defineProperty(jsonResponse, 'lastResponse', {\n          enumerable: false,\n          writable: false,\n          value: rawResponse\n        });\n        callback(null, jsonResponse);\n      }, e => callback(e, null));\n    };\n  }\n  static _generateConnectionErrorMessage(requestRetries) {\n    return `An error occurred with our connection to Stripe.${requestRetries > 0 ? ` Request was retried ${requestRetries} times.` : ''}`;\n  }\n  // For more on when and how to retry API requests, see https://stripe.com/docs/error-handling#safely-retrying-requests-with-idempotency\n  static _shouldRetry(res, numRetries, maxRetries, error) {\n    if (error && numRetries === 0 && HttpClient.CONNECTION_CLOSED_ERROR_CODES.includes(error.code)) {\n      return true;\n    }\n    // Do not retry if we are out of retries.\n    if (numRetries >= maxRetries) {\n      return false;\n    }\n    // Retry on connection error.\n    if (!res) {\n      return true;\n    }\n    // The API may ask us not to retry (e.g., if doing so would be a no-op)\n    // or advise us to retry (e.g., in cases of lock timeouts); we defer to that.\n    if (res.getHeaders()['stripe-should-retry'] === 'false') {\n      return false;\n    }\n    if (res.getHeaders()['stripe-should-retry'] === 'true') {\n      return true;\n    }\n    // Retry on conflict errors.\n    if (res.getStatusCode() === 409) {\n      return true;\n    }\n    // Retry on 500, 503, and other internal errors.\n    //\n    // Note that we expect the stripe-should-retry header to be false\n    // in most cases when a 500 is returned, since our idempotency framework\n    // would typically replay it anyway.\n    if (res.getStatusCode() >= 500) {\n      return true;\n    }\n    return false;\n  }\n  _getSleepTimeInMS(numRetries, retryAfter = null) {\n    const initialNetworkRetryDelay = this._stripe.getInitialNetworkRetryDelay();\n    const maxNetworkRetryDelay = this._stripe.getMaxNetworkRetryDelay();\n    // Apply exponential backoff with initialNetworkRetryDelay on the\n    // number of numRetries so far as inputs. Do not allow the number to exceed\n    // maxNetworkRetryDelay.\n    let sleepSeconds = Math.min(initialNetworkRetryDelay * Math.pow(numRetries - 1, 2), maxNetworkRetryDelay);\n    // Apply some jitter by randomizing the value in the range of\n    // (sleepSeconds / 2) to (sleepSeconds).\n    sleepSeconds *= 0.5 * (1 + Math.random());\n    // But never sleep less than the base sleep seconds.\n    sleepSeconds = Math.max(initialNetworkRetryDelay, sleepSeconds);\n    // And never sleep less than the time the API asks us to wait, assuming it's a reasonable ask.\n    if (Number.isInteger(retryAfter) && retryAfter <= MAX_RETRY_AFTER_WAIT) {\n      sleepSeconds = Math.max(sleepSeconds, retryAfter);\n    }\n    return sleepSeconds * 1000;\n  }\n  // Max retries can be set on a per request basis. Favor those over the global setting\n  _getMaxNetworkRetries(settings = {}) {\n    return settings.maxNetworkRetries !== undefined && Number.isInteger(settings.maxNetworkRetries) ? settings.maxNetworkRetries : this._stripe.getMaxNetworkRetries();\n  }\n  _defaultIdempotencyKey(method, settings) {\n    // If this is a POST and we allow multiple retries, ensure an idempotency key.\n    const maxRetries = this._getMaxNetworkRetries(settings);\n    if (method === 'POST' && maxRetries > 0) {\n      return `stripe-node-retry-${this._stripe._platformFunctions.uuid4()}`;\n    }\n    return null;\n  }\n  _makeHeaders(auth, contentLength, apiVersion, clientUserAgent, method, userSuppliedHeaders, userSuppliedSettings) {\n    const defaultHeaders = {\n      // Use specified auth token or use default from this stripe instance:\n      Authorization: auth ? `Bearer ${auth}` : this._stripe.getApiField('auth'),\n      Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'User-Agent': this._getUserAgentString(),\n      'X-Stripe-Client-User-Agent': clientUserAgent,\n      'X-Stripe-Client-Telemetry': this._getTelemetryHeader(),\n      'Stripe-Version': apiVersion,\n      'Stripe-Account': this._stripe.getApiField('stripeAccount'),\n      'Idempotency-Key': this._defaultIdempotencyKey(method, userSuppliedSettings)\n    };\n    // As per https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.2:\n    //   A user agent SHOULD send a Content-Length in a request message when\n    //   no Transfer-Encoding is sent and the request method defines a meaning\n    //   for an enclosed payload body.  For example, a Content-Length header\n    //   field is normally sent in a POST request even when the value is 0\n    //   (indicating an empty payload body).  A user agent SHOULD NOT send a\n    //   Content-Length header field when the request message does not contain\n    //   a payload body and the method semantics do not anticipate such a\n    //   body.\n    //\n    // These method types are expected to have bodies and so we should always\n    // include a Content-Length.\n    const methodHasPayload = method == 'POST' || method == 'PUT' || method == 'PATCH';\n    // If a content length was specified, we always include it regardless of\n    // whether the method semantics anticipate such a body. This keeps us\n    // consistent with historical behavior. We do however want to warn on this\n    // and fix these cases as they are semantically incorrect.\n    if (methodHasPayload || contentLength) {\n      if (!methodHasPayload) {\n        emitWarning(`${method} method had non-zero contentLength but no payload is expected for this verb`);\n      }\n      defaultHeaders['Content-Length'] = contentLength;\n    }\n    return Object.assign(removeNullish(defaultHeaders),\n    // If the user supplied, say 'idempotency-key', override instead of appending by ensuring caps are the same.\n    normalizeHeaders(userSuppliedHeaders));\n  }\n  _getUserAgentString() {\n    const packageVersion = this._stripe.getConstant('PACKAGE_VERSION');\n    const appInfo = this._stripe._appInfo ? this._stripe.getAppInfoAsString() : '';\n    return `Stripe/v1 NodeBindings/${packageVersion} ${appInfo}`.trim();\n  }\n  _getTelemetryHeader() {\n    if (this._stripe.getTelemetryEnabled() && this._stripe._prevRequestMetrics.length > 0) {\n      const metrics = this._stripe._prevRequestMetrics.shift();\n      return JSON.stringify({\n        last_request_metrics: metrics\n      });\n    }\n  }\n  _recordRequestMetrics(requestId, requestDurationMs, usage) {\n    if (this._stripe.getTelemetryEnabled() && requestId) {\n      if (this._stripe._prevRequestMetrics.length > this._maxBufferedRequestMetric) {\n        emitWarning('Request metrics buffer is full, dropping telemetry message.');\n      } else {\n        const m = {\n          request_id: requestId,\n          request_duration_ms: requestDurationMs\n        };\n        if (usage && usage.length > 0) {\n          m.usage = usage;\n        }\n        this._stripe._prevRequestMetrics.push(m);\n      }\n    }\n  }\n  _request(method, host, path, data, auth, options = {}, usage = [], callback, requestDataProcessor = null) {\n    let requestData;\n    const retryRequest = (requestFn, apiVersion, headers, requestRetries, retryAfter) => {\n      return setTimeout(requestFn, this._getSleepTimeInMS(requestRetries, retryAfter), apiVersion, headers, requestRetries + 1);\n    };\n    const makeRequest = (apiVersion, headers, numRetries) => {\n      // timeout can be set on a per-request basis. Favor that over the global setting\n      const timeout = options.settings && options.settings.timeout && Number.isInteger(options.settings.timeout) && options.settings.timeout >= 0 ? options.settings.timeout : this._stripe.getApiField('timeout');\n      const req = this._stripe.getApiField('httpClient').makeRequest(host || this._stripe.getApiField('host'), this._stripe.getApiField('port'), path, method, headers, requestData, this._stripe.getApiField('protocol'), timeout);\n      const requestStartTime = Date.now();\n      // @ts-ignore\n      const requestEvent = removeNullish({\n        api_version: apiVersion,\n        account: headers['Stripe-Account'],\n        idempotency_key: headers['Idempotency-Key'],\n        method,\n        path,\n        request_start_time: requestStartTime\n      });\n      const requestRetries = numRetries || 0;\n      const maxRetries = this._getMaxNetworkRetries(options.settings || {});\n      this._stripe._emitter.emit('request', requestEvent);\n      req.then(res => {\n        if (RequestSender._shouldRetry(res, requestRetries, maxRetries)) {\n          return retryRequest(makeRequest, apiVersion, headers, requestRetries,\n          // @ts-ignore\n          res.getHeaders()['retry-after']);\n        } else if (options.streaming && res.getStatusCode() < 400) {\n          return this._streamingResponseHandler(requestEvent, usage, callback)(res);\n        } else {\n          return this._jsonResponseHandler(requestEvent, usage, callback)(res);\n        }\n      }).catch(error => {\n        if (RequestSender._shouldRetry(null, requestRetries, maxRetries, error)) {\n          return retryRequest(makeRequest, apiVersion, headers, requestRetries, null);\n        } else {\n          const isTimeoutError = error.code && error.code === HttpClient.TIMEOUT_ERROR_CODE;\n          return callback(new StripeConnectionError({\n            message: isTimeoutError ? `Request aborted due to timeout being reached (${timeout}ms)` : RequestSender._generateConnectionErrorMessage(requestRetries),\n            // @ts-ignore\n            detail: error\n          }));\n        }\n      });\n    };\n    const prepareAndMakeRequest = (error, data) => {\n      if (error) {\n        return callback(error);\n      }\n      requestData = data;\n      this._stripe.getClientUserAgent(clientUserAgent => {\n        var _a, _b;\n        const apiVersion = this._stripe.getApiField('version');\n        const headers = this._makeHeaders(auth, requestData.length, apiVersion, clientUserAgent, method, (_a = options.headers) !== null && _a !== void 0 ? _a : null, (_b = options.settings) !== null && _b !== void 0 ? _b : {});\n        makeRequest(apiVersion, headers, 0);\n      });\n    };\n    if (requestDataProcessor) {\n      requestDataProcessor(method, data, options.headers, prepareAndMakeRequest);\n    } else {\n      prepareAndMakeRequest(null, stringifyRequestData(data || {}));\n    }\n  }\n}","map":{"version":3,"names":["StripeAPIError","StripeAuthenticationError","StripeConnectionError","StripeError","StripePermissionError","StripeRateLimitError","emitWarning","normalizeHeaders","removeNullish","stringifyRequestData","HttpClient","MAX_RETRY_AFTER_WAIT","RequestSender","constructor","stripe","maxBufferedRequestMetric","_stripe","_maxBufferedRequestMetric","_addHeadersDirectlyToObject","obj","headers","requestId","stripeAccount","apiVersion","idempotencyKey","_makeResponseEvent","requestEvent","statusCode","requestEndTime","Date","now","requestDurationMs","request_start_time","api_version","account","idempotency_key","method","path","status","request_id","_getRequestId","elapsed","request_end_time","_streamingResponseHandler","usage","callback","res","getHeaders","streamCompleteCallback","responseEvent","getStatusCode","_emitter","emit","_recordRequestMetrics","stream","toStream","_jsonResponseHandler","toJSON","then","jsonResponse","error","err","type","message","error_description","generate","e","exception","rawResponse","getRawResponse","Object","defineProperty","enumerable","writable","value","_generateConnectionErrorMessage","requestRetries","_shouldRetry","numRetries","maxRetries","CONNECTION_CLOSED_ERROR_CODES","includes","code","_getSleepTimeInMS","retryAfter","initialNetworkRetryDelay","getInitialNetworkRetryDelay","maxNetworkRetryDelay","getMaxNetworkRetryDelay","sleepSeconds","Math","min","pow","random","max","Number","isInteger","_getMaxNetworkRetries","settings","maxNetworkRetries","undefined","getMaxNetworkRetries","_defaultIdempotencyKey","_platformFunctions","uuid4","_makeHeaders","auth","contentLength","clientUserAgent","userSuppliedHeaders","userSuppliedSettings","defaultHeaders","Authorization","getApiField","Accept","_getUserAgentString","_getTelemetryHeader","methodHasPayload","assign","packageVersion","getConstant","appInfo","_appInfo","getAppInfoAsString","trim","getTelemetryEnabled","_prevRequestMetrics","length","metrics","shift","JSON","stringify","last_request_metrics","m","request_duration_ms","push","_request","host","data","options","requestDataProcessor","requestData","retryRequest","requestFn","setTimeout","makeRequest","timeout","req","requestStartTime","streaming","catch","isTimeoutError","TIMEOUT_ERROR_CODE","detail","prepareAndMakeRequest","getClientUserAgent","_a","_b"],"sources":["/Users/manuelperez/Projects/React/InvoiceFlow/node_modules/stripe/esm/RequestSender.js"],"sourcesContent":["import { StripeAPIError, StripeAuthenticationError, StripeConnectionError, StripeError, StripePermissionError, StripeRateLimitError, } from './Error.js';\nimport { emitWarning, normalizeHeaders, removeNullish, stringifyRequestData, } from './utils.js';\nimport { HttpClient } from './net/HttpClient.js';\nconst MAX_RETRY_AFTER_WAIT = 60;\nexport class RequestSender {\n    constructor(stripe, maxBufferedRequestMetric) {\n        this._stripe = stripe;\n        this._maxBufferedRequestMetric = maxBufferedRequestMetric;\n    }\n    _addHeadersDirectlyToObject(obj, headers) {\n        // For convenience, make some headers easily accessible on\n        // lastResponse.\n        // NOTE: Stripe responds with lowercase header names/keys.\n        obj.requestId = headers['request-id'];\n        obj.stripeAccount = obj.stripeAccount || headers['stripe-account'];\n        obj.apiVersion = obj.apiVersion || headers['stripe-version'];\n        obj.idempotencyKey = obj.idempotencyKey || headers['idempotency-key'];\n    }\n    _makeResponseEvent(requestEvent, statusCode, headers) {\n        const requestEndTime = Date.now();\n        const requestDurationMs = requestEndTime - requestEvent.request_start_time;\n        return removeNullish({\n            api_version: headers['stripe-version'],\n            account: headers['stripe-account'],\n            idempotency_key: headers['idempotency-key'],\n            method: requestEvent.method,\n            path: requestEvent.path,\n            status: statusCode,\n            request_id: this._getRequestId(headers),\n            elapsed: requestDurationMs,\n            request_start_time: requestEvent.request_start_time,\n            request_end_time: requestEndTime,\n        });\n    }\n    _getRequestId(headers) {\n        return headers['request-id'];\n    }\n    /**\n     * Used by methods with spec.streaming === true. For these methods, we do not\n     * buffer successful responses into memory or do parse them into stripe\n     * objects, we delegate that all of that to the user and pass back the raw\n     * http.Response object to the callback.\n     *\n     * (Unsuccessful responses shouldn't make it here, they should\n     * still be buffered/parsed and handled by _jsonResponseHandler -- see\n     * makeRequest)\n     */\n    _streamingResponseHandler(requestEvent, usage, callback) {\n        return (res) => {\n            const headers = res.getHeaders();\n            const streamCompleteCallback = () => {\n                const responseEvent = this._makeResponseEvent(requestEvent, res.getStatusCode(), headers);\n                this._stripe._emitter.emit('response', responseEvent);\n                this._recordRequestMetrics(this._getRequestId(headers), responseEvent.elapsed, usage);\n            };\n            const stream = res.toStream(streamCompleteCallback);\n            // This is here for backwards compatibility, as the stream is a raw\n            // HTTP response in Node and the legacy behavior was to mutate this\n            // response.\n            this._addHeadersDirectlyToObject(stream, headers);\n            return callback(null, stream);\n        };\n    }\n    /**\n     * Default handler for Stripe responses. Buffers the response into memory,\n     * parses the JSON and returns it (i.e. passes it to the callback) if there\n     * is no \"error\" field. Otherwise constructs/passes an appropriate Error.\n     */\n    _jsonResponseHandler(requestEvent, usage, callback) {\n        return (res) => {\n            const headers = res.getHeaders();\n            const requestId = this._getRequestId(headers);\n            const statusCode = res.getStatusCode();\n            const responseEvent = this._makeResponseEvent(requestEvent, statusCode, headers);\n            this._stripe._emitter.emit('response', responseEvent);\n            res\n                .toJSON()\n                .then((jsonResponse) => {\n                if (jsonResponse.error) {\n                    let err;\n                    // Convert OAuth error responses into a standard format\n                    // so that the rest of the error logic can be shared\n                    if (typeof jsonResponse.error === 'string') {\n                        jsonResponse.error = {\n                            type: jsonResponse.error,\n                            message: jsonResponse.error_description,\n                        };\n                    }\n                    jsonResponse.error.headers = headers;\n                    jsonResponse.error.statusCode = statusCode;\n                    jsonResponse.error.requestId = requestId;\n                    if (statusCode === 401) {\n                        err = new StripeAuthenticationError(jsonResponse.error);\n                    }\n                    else if (statusCode === 403) {\n                        err = new StripePermissionError(jsonResponse.error);\n                    }\n                    else if (statusCode === 429) {\n                        err = new StripeRateLimitError(jsonResponse.error);\n                    }\n                    else {\n                        err = StripeError.generate(jsonResponse.error);\n                    }\n                    throw err;\n                }\n                return jsonResponse;\n            }, (e) => {\n                throw new StripeAPIError({\n                    message: 'Invalid JSON received from the Stripe API',\n                    exception: e,\n                    requestId: headers['request-id'],\n                });\n            })\n                .then((jsonResponse) => {\n                this._recordRequestMetrics(requestId, responseEvent.elapsed, usage);\n                // Expose raw response object.\n                const rawResponse = res.getRawResponse();\n                this._addHeadersDirectlyToObject(rawResponse, headers);\n                Object.defineProperty(jsonResponse, 'lastResponse', {\n                    enumerable: false,\n                    writable: false,\n                    value: rawResponse,\n                });\n                callback(null, jsonResponse);\n            }, (e) => callback(e, null));\n        };\n    }\n    static _generateConnectionErrorMessage(requestRetries) {\n        return `An error occurred with our connection to Stripe.${requestRetries > 0 ? ` Request was retried ${requestRetries} times.` : ''}`;\n    }\n    // For more on when and how to retry API requests, see https://stripe.com/docs/error-handling#safely-retrying-requests-with-idempotency\n    static _shouldRetry(res, numRetries, maxRetries, error) {\n        if (error &&\n            numRetries === 0 &&\n            HttpClient.CONNECTION_CLOSED_ERROR_CODES.includes(error.code)) {\n            return true;\n        }\n        // Do not retry if we are out of retries.\n        if (numRetries >= maxRetries) {\n            return false;\n        }\n        // Retry on connection error.\n        if (!res) {\n            return true;\n        }\n        // The API may ask us not to retry (e.g., if doing so would be a no-op)\n        // or advise us to retry (e.g., in cases of lock timeouts); we defer to that.\n        if (res.getHeaders()['stripe-should-retry'] === 'false') {\n            return false;\n        }\n        if (res.getHeaders()['stripe-should-retry'] === 'true') {\n            return true;\n        }\n        // Retry on conflict errors.\n        if (res.getStatusCode() === 409) {\n            return true;\n        }\n        // Retry on 500, 503, and other internal errors.\n        //\n        // Note that we expect the stripe-should-retry header to be false\n        // in most cases when a 500 is returned, since our idempotency framework\n        // would typically replay it anyway.\n        if (res.getStatusCode() >= 500) {\n            return true;\n        }\n        return false;\n    }\n    _getSleepTimeInMS(numRetries, retryAfter = null) {\n        const initialNetworkRetryDelay = this._stripe.getInitialNetworkRetryDelay();\n        const maxNetworkRetryDelay = this._stripe.getMaxNetworkRetryDelay();\n        // Apply exponential backoff with initialNetworkRetryDelay on the\n        // number of numRetries so far as inputs. Do not allow the number to exceed\n        // maxNetworkRetryDelay.\n        let sleepSeconds = Math.min(initialNetworkRetryDelay * Math.pow(numRetries - 1, 2), maxNetworkRetryDelay);\n        // Apply some jitter by randomizing the value in the range of\n        // (sleepSeconds / 2) to (sleepSeconds).\n        sleepSeconds *= 0.5 * (1 + Math.random());\n        // But never sleep less than the base sleep seconds.\n        sleepSeconds = Math.max(initialNetworkRetryDelay, sleepSeconds);\n        // And never sleep less than the time the API asks us to wait, assuming it's a reasonable ask.\n        if (Number.isInteger(retryAfter) && retryAfter <= MAX_RETRY_AFTER_WAIT) {\n            sleepSeconds = Math.max(sleepSeconds, retryAfter);\n        }\n        return sleepSeconds * 1000;\n    }\n    // Max retries can be set on a per request basis. Favor those over the global setting\n    _getMaxNetworkRetries(settings = {}) {\n        return settings.maxNetworkRetries !== undefined &&\n            Number.isInteger(settings.maxNetworkRetries)\n            ? settings.maxNetworkRetries\n            : this._stripe.getMaxNetworkRetries();\n    }\n    _defaultIdempotencyKey(method, settings) {\n        // If this is a POST and we allow multiple retries, ensure an idempotency key.\n        const maxRetries = this._getMaxNetworkRetries(settings);\n        if (method === 'POST' && maxRetries > 0) {\n            return `stripe-node-retry-${this._stripe._platformFunctions.uuid4()}`;\n        }\n        return null;\n    }\n    _makeHeaders(auth, contentLength, apiVersion, clientUserAgent, method, userSuppliedHeaders, userSuppliedSettings) {\n        const defaultHeaders = {\n            // Use specified auth token or use default from this stripe instance:\n            Authorization: auth ? `Bearer ${auth}` : this._stripe.getApiField('auth'),\n            Accept: 'application/json',\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'User-Agent': this._getUserAgentString(),\n            'X-Stripe-Client-User-Agent': clientUserAgent,\n            'X-Stripe-Client-Telemetry': this._getTelemetryHeader(),\n            'Stripe-Version': apiVersion,\n            'Stripe-Account': this._stripe.getApiField('stripeAccount'),\n            'Idempotency-Key': this._defaultIdempotencyKey(method, userSuppliedSettings),\n        };\n        // As per https://datatracker.ietf.org/doc/html/rfc7230#section-3.3.2:\n        //   A user agent SHOULD send a Content-Length in a request message when\n        //   no Transfer-Encoding is sent and the request method defines a meaning\n        //   for an enclosed payload body.  For example, a Content-Length header\n        //   field is normally sent in a POST request even when the value is 0\n        //   (indicating an empty payload body).  A user agent SHOULD NOT send a\n        //   Content-Length header field when the request message does not contain\n        //   a payload body and the method semantics do not anticipate such a\n        //   body.\n        //\n        // These method types are expected to have bodies and so we should always\n        // include a Content-Length.\n        const methodHasPayload = method == 'POST' || method == 'PUT' || method == 'PATCH';\n        // If a content length was specified, we always include it regardless of\n        // whether the method semantics anticipate such a body. This keeps us\n        // consistent with historical behavior. We do however want to warn on this\n        // and fix these cases as they are semantically incorrect.\n        if (methodHasPayload || contentLength) {\n            if (!methodHasPayload) {\n                emitWarning(`${method} method had non-zero contentLength but no payload is expected for this verb`);\n            }\n            defaultHeaders['Content-Length'] = contentLength;\n        }\n        return Object.assign(removeNullish(defaultHeaders), \n        // If the user supplied, say 'idempotency-key', override instead of appending by ensuring caps are the same.\n        normalizeHeaders(userSuppliedHeaders));\n    }\n    _getUserAgentString() {\n        const packageVersion = this._stripe.getConstant('PACKAGE_VERSION');\n        const appInfo = this._stripe._appInfo\n            ? this._stripe.getAppInfoAsString()\n            : '';\n        return `Stripe/v1 NodeBindings/${packageVersion} ${appInfo}`.trim();\n    }\n    _getTelemetryHeader() {\n        if (this._stripe.getTelemetryEnabled() &&\n            this._stripe._prevRequestMetrics.length > 0) {\n            const metrics = this._stripe._prevRequestMetrics.shift();\n            return JSON.stringify({\n                last_request_metrics: metrics,\n            });\n        }\n    }\n    _recordRequestMetrics(requestId, requestDurationMs, usage) {\n        if (this._stripe.getTelemetryEnabled() && requestId) {\n            if (this._stripe._prevRequestMetrics.length > this._maxBufferedRequestMetric) {\n                emitWarning('Request metrics buffer is full, dropping telemetry message.');\n            }\n            else {\n                const m = {\n                    request_id: requestId,\n                    request_duration_ms: requestDurationMs,\n                };\n                if (usage && usage.length > 0) {\n                    m.usage = usage;\n                }\n                this._stripe._prevRequestMetrics.push(m);\n            }\n        }\n    }\n    _request(method, host, path, data, auth, options = {}, usage = [], callback, requestDataProcessor = null) {\n        let requestData;\n        const retryRequest = (requestFn, apiVersion, headers, requestRetries, retryAfter) => {\n            return setTimeout(requestFn, this._getSleepTimeInMS(requestRetries, retryAfter), apiVersion, headers, requestRetries + 1);\n        };\n        const makeRequest = (apiVersion, headers, numRetries) => {\n            // timeout can be set on a per-request basis. Favor that over the global setting\n            const timeout = options.settings &&\n                options.settings.timeout &&\n                Number.isInteger(options.settings.timeout) &&\n                options.settings.timeout >= 0\n                ? options.settings.timeout\n                : this._stripe.getApiField('timeout');\n            const req = this._stripe\n                .getApiField('httpClient')\n                .makeRequest(host || this._stripe.getApiField('host'), this._stripe.getApiField('port'), path, method, headers, requestData, this._stripe.getApiField('protocol'), timeout);\n            const requestStartTime = Date.now();\n            // @ts-ignore\n            const requestEvent = removeNullish({\n                api_version: apiVersion,\n                account: headers['Stripe-Account'],\n                idempotency_key: headers['Idempotency-Key'],\n                method,\n                path,\n                request_start_time: requestStartTime,\n            });\n            const requestRetries = numRetries || 0;\n            const maxRetries = this._getMaxNetworkRetries(options.settings || {});\n            this._stripe._emitter.emit('request', requestEvent);\n            req\n                .then((res) => {\n                if (RequestSender._shouldRetry(res, requestRetries, maxRetries)) {\n                    return retryRequest(makeRequest, apiVersion, headers, requestRetries, \n                    // @ts-ignore\n                    res.getHeaders()['retry-after']);\n                }\n                else if (options.streaming && res.getStatusCode() < 400) {\n                    return this._streamingResponseHandler(requestEvent, usage, callback)(res);\n                }\n                else {\n                    return this._jsonResponseHandler(requestEvent, usage, callback)(res);\n                }\n            })\n                .catch((error) => {\n                if (RequestSender._shouldRetry(null, requestRetries, maxRetries, error)) {\n                    return retryRequest(makeRequest, apiVersion, headers, requestRetries, null);\n                }\n                else {\n                    const isTimeoutError = error.code && error.code === HttpClient.TIMEOUT_ERROR_CODE;\n                    return callback(new StripeConnectionError({\n                        message: isTimeoutError\n                            ? `Request aborted due to timeout being reached (${timeout}ms)`\n                            : RequestSender._generateConnectionErrorMessage(requestRetries),\n                        // @ts-ignore\n                        detail: error,\n                    }));\n                }\n            });\n        };\n        const prepareAndMakeRequest = (error, data) => {\n            if (error) {\n                return callback(error);\n            }\n            requestData = data;\n            this._stripe.getClientUserAgent((clientUserAgent) => {\n                var _a, _b;\n                const apiVersion = this._stripe.getApiField('version');\n                const headers = this._makeHeaders(auth, requestData.length, apiVersion, clientUserAgent, method, (_a = options.headers) !== null && _a !== void 0 ? _a : null, (_b = options.settings) !== null && _b !== void 0 ? _b : {});\n                makeRequest(apiVersion, headers, 0);\n            });\n        };\n        if (requestDataProcessor) {\n            requestDataProcessor(method, data, options.headers, prepareAndMakeRequest);\n        }\n        else {\n            prepareAndMakeRequest(null, stringifyRequestData(data || {}));\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}