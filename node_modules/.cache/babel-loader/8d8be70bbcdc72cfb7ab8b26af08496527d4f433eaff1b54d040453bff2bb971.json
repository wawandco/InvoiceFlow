{"ast":null,"code":"/**\n * Interface encapsulating the various crypto computations used by the library,\n * allowing pluggable underlying crypto implementations.\n */\nexport class CryptoProvider {\n  /**\n   * Computes a SHA-256 HMAC given a secret and a payload (encoded in UTF-8).\n   * The output HMAC should be encoded in hexadecimal.\n   *\n   * Sample values for implementations:\n   * - computeHMACSignature('', 'test_secret') => 'f7f9bd47fb987337b5796fdc1fdb9ba221d0d5396814bfcaf9521f43fd8927fd'\n   * - computeHMACSignature('\\ud83d\\ude00', 'test_secret') => '837da296d05c4fe31f61d5d7ead035099d9585a5bcde87de952012a78f0b0c43\n   */\n  computeHMACSignature(payload, secret) {\n    throw new Error('computeHMACSignature not implemented.');\n  }\n  /**\n   * Asynchronous version of `computeHMACSignature`. Some implementations may\n   * only allow support async signature computation.\n   *\n   * Computes a SHA-256 HMAC given a secret and a payload (encoded in UTF-8).\n   * The output HMAC should be encoded in hexadecimal.\n   *\n   * Sample values for implementations:\n   * - computeHMACSignature('', 'test_secret') => 'f7f9bd47fb987337b5796fdc1fdb9ba221d0d5396814bfcaf9521f43fd8927fd'\n   * - computeHMACSignature('\\ud83d\\ude00', 'test_secret') => '837da296d05c4fe31f61d5d7ead035099d9585a5bcde87de952012a78f0b0c43\n   */\n  computeHMACSignatureAsync(payload, secret) {\n    throw new Error('computeHMACSignatureAsync not implemented.');\n  }\n}\n/**\n * If the crypto provider only supports asynchronous operations,\n * throw CryptoProviderOnlySupportsAsyncError instead of\n * a generic error so that the caller can choose to provide\n * a more helpful error message to direct the user to use\n * an asynchronous pathway.\n */\nexport class CryptoProviderOnlySupportsAsyncError extends Error {}","map":{"version":3,"names":["CryptoProvider","computeHMACSignature","payload","secret","Error","computeHMACSignatureAsync","CryptoProviderOnlySupportsAsyncError"],"sources":["/Users/manuelperez/Projects/React/InvoiceFlow/node_modules/stripe/esm/crypto/CryptoProvider.js"],"sourcesContent":["/**\n * Interface encapsulating the various crypto computations used by the library,\n * allowing pluggable underlying crypto implementations.\n */\nexport class CryptoProvider {\n    /**\n     * Computes a SHA-256 HMAC given a secret and a payload (encoded in UTF-8).\n     * The output HMAC should be encoded in hexadecimal.\n     *\n     * Sample values for implementations:\n     * - computeHMACSignature('', 'test_secret') => 'f7f9bd47fb987337b5796fdc1fdb9ba221d0d5396814bfcaf9521f43fd8927fd'\n     * - computeHMACSignature('\\ud83d\\ude00', 'test_secret') => '837da296d05c4fe31f61d5d7ead035099d9585a5bcde87de952012a78f0b0c43\n     */\n    computeHMACSignature(payload, secret) {\n        throw new Error('computeHMACSignature not implemented.');\n    }\n    /**\n     * Asynchronous version of `computeHMACSignature`. Some implementations may\n     * only allow support async signature computation.\n     *\n     * Computes a SHA-256 HMAC given a secret and a payload (encoded in UTF-8).\n     * The output HMAC should be encoded in hexadecimal.\n     *\n     * Sample values for implementations:\n     * - computeHMACSignature('', 'test_secret') => 'f7f9bd47fb987337b5796fdc1fdb9ba221d0d5396814bfcaf9521f43fd8927fd'\n     * - computeHMACSignature('\\ud83d\\ude00', 'test_secret') => '837da296d05c4fe31f61d5d7ead035099d9585a5bcde87de952012a78f0b0c43\n     */\n    computeHMACSignatureAsync(payload, secret) {\n        throw new Error('computeHMACSignatureAsync not implemented.');\n    }\n}\n/**\n * If the crypto provider only supports asynchronous operations,\n * throw CryptoProviderOnlySupportsAsyncError instead of\n * a generic error so that the caller can choose to provide\n * a more helpful error message to direct the user to use\n * an asynchronous pathway.\n */\nexport class CryptoProviderOnlySupportsAsyncError extends Error {\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,cAAc,CAAC;EACxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,oBAAoBA,CAACC,OAAO,EAAEC,MAAM,EAAE;IAClC,MAAM,IAAIC,KAAK,CAAC,uCAAuC,CAAC;EAC5D;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,yBAAyBA,CAACH,OAAO,EAAEC,MAAM,EAAE;IACvC,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EACjE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,oCAAoC,SAASF,KAAK,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}