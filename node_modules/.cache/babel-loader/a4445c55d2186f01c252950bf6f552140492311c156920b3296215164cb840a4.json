{"ast":null,"code":"import { PlatformFunctions } from './PlatformFunctions.js';\nimport { StripeEmitter } from '../StripeEmitter.js';\n/**\n * Specializes WebPlatformFunctions using APIs available in Web workers.\n */\nexport class WebPlatformFunctions extends PlatformFunctions {\n  /** @override */\n  getUname() {\n    return Promise.resolve(null);\n  }\n  /** @override */\n  createEmitter() {\n    return new StripeEmitter();\n  }\n  /** @override */\n  tryBufferData(data) {\n    if (data.file.data instanceof ReadableStream) {\n      throw new Error('Uploading a file as a stream is not supported in non-Node environments. Please open or upvote an issue at github.com/stripe/stripe-node if you use this, detailing your use-case.');\n    }\n    return Promise.resolve(data);\n  }\n  /** @override */\n  createNodeHttpClient() {\n    throw new Error('Stripe: `createNodeHttpClient()` is not available in non-Node environments. Please use `createFetchHttpClient()` instead.');\n  }\n  /** @override */\n  createDefaultHttpClient() {\n    return super.createFetchHttpClient();\n  }\n  /** @override */\n  createNodeCryptoProvider() {\n    throw new Error('Stripe: `createNodeCryptoProvider()` is not available in non-Node environments. Please use `createSubtleCryptoProvider()` instead.');\n  }\n  /** @override */\n  createDefaultCryptoProvider() {\n    return this.createSubtleCryptoProvider();\n  }\n}","map":{"version":3,"names":["PlatformFunctions","StripeEmitter","WebPlatformFunctions","getUname","Promise","resolve","createEmitter","tryBufferData","data","file","ReadableStream","Error","createNodeHttpClient","createDefaultHttpClient","createFetchHttpClient","createNodeCryptoProvider","createDefaultCryptoProvider","createSubtleCryptoProvider"],"sources":["/Users/manuelperez/Projects/React/InvoiceFlow/node_modules/stripe/esm/platform/WebPlatformFunctions.js"],"sourcesContent":["import { PlatformFunctions } from './PlatformFunctions.js';\nimport { StripeEmitter } from '../StripeEmitter.js';\n/**\n * Specializes WebPlatformFunctions using APIs available in Web workers.\n */\nexport class WebPlatformFunctions extends PlatformFunctions {\n    /** @override */\n    getUname() {\n        return Promise.resolve(null);\n    }\n    /** @override */\n    createEmitter() {\n        return new StripeEmitter();\n    }\n    /** @override */\n    tryBufferData(data) {\n        if (data.file.data instanceof ReadableStream) {\n            throw new Error('Uploading a file as a stream is not supported in non-Node environments. Please open or upvote an issue at github.com/stripe/stripe-node if you use this, detailing your use-case.');\n        }\n        return Promise.resolve(data);\n    }\n    /** @override */\n    createNodeHttpClient() {\n        throw new Error('Stripe: `createNodeHttpClient()` is not available in non-Node environments. Please use `createFetchHttpClient()` instead.');\n    }\n    /** @override */\n    createDefaultHttpClient() {\n        return super.createFetchHttpClient();\n    }\n    /** @override */\n    createNodeCryptoProvider() {\n        throw new Error('Stripe: `createNodeCryptoProvider()` is not available in non-Node environments. Please use `createSubtleCryptoProvider()` instead.');\n    }\n    /** @override */\n    createDefaultCryptoProvider() {\n        return this.createSubtleCryptoProvider();\n    }\n}\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,wBAAwB;AAC1D,SAASC,aAAa,QAAQ,qBAAqB;AACnD;AACA;AACA;AACA,OAAO,MAAMC,oBAAoB,SAASF,iBAAiB,CAAC;EACxD;EACAG,QAAQA,CAAA,EAAG;IACP,OAAOC,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;EAChC;EACA;EACAC,aAAaA,CAAA,EAAG;IACZ,OAAO,IAAIL,aAAa,CAAC,CAAC;EAC9B;EACA;EACAM,aAAaA,CAACC,IAAI,EAAE;IAChB,IAAIA,IAAI,CAACC,IAAI,CAACD,IAAI,YAAYE,cAAc,EAAE;MAC1C,MAAM,IAAIC,KAAK,CAAC,mLAAmL,CAAC;IACxM;IACA,OAAOP,OAAO,CAACC,OAAO,CAACG,IAAI,CAAC;EAChC;EACA;EACAI,oBAAoBA,CAAA,EAAG;IACnB,MAAM,IAAID,KAAK,CAAC,2HAA2H,CAAC;EAChJ;EACA;EACAE,uBAAuBA,CAAA,EAAG;IACtB,OAAO,KAAK,CAACC,qBAAqB,CAAC,CAAC;EACxC;EACA;EACAC,wBAAwBA,CAAA,EAAG;IACvB,MAAM,IAAIJ,KAAK,CAAC,oIAAoI,CAAC;EACzJ;EACA;EACAK,2BAA2BA,CAAA,EAAG;IAC1B,OAAO,IAAI,CAACC,0BAA0B,CAAC,CAAC;EAC5C;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}