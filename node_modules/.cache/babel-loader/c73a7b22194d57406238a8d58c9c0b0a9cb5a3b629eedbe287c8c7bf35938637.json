{"ast":null,"code":"import { callbackifyPromiseWithTimeout, extractUrlParams } from './utils.js';\nimport { makeAutoPaginationMethods } from './autoPagination.js';\n/**\n * Create an API method from the declared spec.\n *\n * @param [spec.method='GET'] Request Method (POST, GET, DELETE, PUT)\n * @param [spec.path=''] Path to be appended to the API BASE_PATH, joined with\n *  the instance's path (e.g. 'charges' or 'customers')\n * @param [spec.fullPath=''] Fully qualified path to the method (eg. /v1/a/b/c).\n *  If this is specified, path should not be specified.\n * @param [spec.urlParams=[]] Array of required arguments in the order that they\n *  must be passed by the consumer of the API. Subsequent optional arguments are\n *  optionally passed through a hash (Object) as the penultimate argument\n *  (preceding the also-optional callback argument\n * @param [spec.encode] Function for mutating input parameters to a method.\n *  Usefully for applying transforms to data on a per-method basis.\n * @param [spec.host] Hostname for the request.\n *\n * <!-- Public API accessible via Stripe.StripeResource.method -->\n */\nexport function stripeMethod(spec) {\n  if (spec.path !== undefined && spec.fullPath !== undefined) {\n    throw new Error(`Method spec specified both a 'path' (${spec.path}) and a 'fullPath' (${spec.fullPath}).`);\n  }\n  return function (...args) {\n    const callback = typeof args[args.length - 1] == 'function' && args.pop();\n    spec.urlParams = extractUrlParams(spec.fullPath || this.createResourcePathWithSymbols(spec.path || ''));\n    const requestPromise = callbackifyPromiseWithTimeout(this._makeRequest(args, spec, {}), callback);\n    Object.assign(requestPromise, makeAutoPaginationMethods(this, args, spec, requestPromise));\n    return requestPromise;\n  };\n}","map":{"version":3,"names":["callbackifyPromiseWithTimeout","extractUrlParams","makeAutoPaginationMethods","stripeMethod","spec","path","undefined","fullPath","Error","args","callback","length","pop","urlParams","createResourcePathWithSymbols","requestPromise","_makeRequest","Object","assign"],"sources":["/Users/manuelperez/Projects/React/InvoiceFlow/node_modules/stripe/esm/StripeMethod.js"],"sourcesContent":["import { callbackifyPromiseWithTimeout, extractUrlParams } from './utils.js';\nimport { makeAutoPaginationMethods } from './autoPagination.js';\n/**\n * Create an API method from the declared spec.\n *\n * @param [spec.method='GET'] Request Method (POST, GET, DELETE, PUT)\n * @param [spec.path=''] Path to be appended to the API BASE_PATH, joined with\n *  the instance's path (e.g. 'charges' or 'customers')\n * @param [spec.fullPath=''] Fully qualified path to the method (eg. /v1/a/b/c).\n *  If this is specified, path should not be specified.\n * @param [spec.urlParams=[]] Array of required arguments in the order that they\n *  must be passed by the consumer of the API. Subsequent optional arguments are\n *  optionally passed through a hash (Object) as the penultimate argument\n *  (preceding the also-optional callback argument\n * @param [spec.encode] Function for mutating input parameters to a method.\n *  Usefully for applying transforms to data on a per-method basis.\n * @param [spec.host] Hostname for the request.\n *\n * <!-- Public API accessible via Stripe.StripeResource.method -->\n */\nexport function stripeMethod(spec) {\n    if (spec.path !== undefined && spec.fullPath !== undefined) {\n        throw new Error(`Method spec specified both a 'path' (${spec.path}) and a 'fullPath' (${spec.fullPath}).`);\n    }\n    return function (...args) {\n        const callback = typeof args[args.length - 1] == 'function' && args.pop();\n        spec.urlParams = extractUrlParams(spec.fullPath || this.createResourcePathWithSymbols(spec.path || ''));\n        const requestPromise = callbackifyPromiseWithTimeout(this._makeRequest(args, spec, {}), callback);\n        Object.assign(requestPromise, makeAutoPaginationMethods(this, args, spec, requestPromise));\n        return requestPromise;\n    };\n}\n"],"mappings":"AAAA,SAASA,6BAA6B,EAAEC,gBAAgB,QAAQ,YAAY;AAC5E,SAASC,yBAAyB,QAAQ,qBAAqB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAACC,IAAI,EAAE;EAC/B,IAAIA,IAAI,CAACC,IAAI,KAAKC,SAAS,IAAIF,IAAI,CAACG,QAAQ,KAAKD,SAAS,EAAE;IACxD,MAAM,IAAIE,KAAK,CAAE,wCAAuCJ,IAAI,CAACC,IAAK,uBAAsBD,IAAI,CAACG,QAAS,IAAG,CAAC;EAC9G;EACA,OAAO,UAAU,GAAGE,IAAI,EAAE;IACtB,MAAMC,QAAQ,GAAG,OAAOD,IAAI,CAACA,IAAI,CAACE,MAAM,GAAG,CAAC,CAAC,IAAI,UAAU,IAAIF,IAAI,CAACG,GAAG,CAAC,CAAC;IACzER,IAAI,CAACS,SAAS,GAAGZ,gBAAgB,CAACG,IAAI,CAACG,QAAQ,IAAI,IAAI,CAACO,6BAA6B,CAACV,IAAI,CAACC,IAAI,IAAI,EAAE,CAAC,CAAC;IACvG,MAAMU,cAAc,GAAGf,6BAA6B,CAAC,IAAI,CAACgB,YAAY,CAACP,IAAI,EAAEL,IAAI,EAAE,CAAC,CAAC,CAAC,EAAEM,QAAQ,CAAC;IACjGO,MAAM,CAACC,MAAM,CAACH,cAAc,EAAEb,yBAAyB,CAAC,IAAI,EAAEO,IAAI,EAAEL,IAAI,EAAEW,cAAc,CAAC,CAAC;IAC1F,OAAOA,cAAc;EACzB,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}